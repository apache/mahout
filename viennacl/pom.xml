<?xml version="1.0" encoding="UTF-8"?>

<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.apache.mahout</groupId>
    <artifactId>mahout</artifactId>
    <version>0.12.3-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <!--<artifactId>mahout-native-viennacl_${scala.compat.version}</artifactId>-->
  <artifactId>mahout-native-viennacl_${scala.compat.version}</artifactId>

  <name>Mahout Native VienniaCL Bindings</name>
  <description>Native Structures and interfaces to be used from Mahout math-scala.
  </description>

  <packaging>jar</packaging>

  <build>
    <plugins>
      <!-- create test jar so other modules can reuse the native test utility classes. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>test-jar</goal>
            </goals>
            <phase>package</phase>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-javadoc-plugin</artifactId>
      </plugin>

      <plugin>
        <artifactId>maven-source-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>add-scala-sources</id>
            <phase>initialize</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
          </execution>
          <execution>
            <id>scala-compile</id>
            <phase>process-resources</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
          <execution>
            <id>scala-test-compile</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--this is what scalatest recommends to do to enable scala tests -->

      <!-- disable surefire -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skipTests>true</skipTests>
        </configuration>
      </plugin>
      <!-- enable scalatest -->
      <plugin>
        <groupId>org.scalatest</groupId>
        <artifactId>scalatest-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>test</id>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>

        </executions>
      </plugin>



      <!--JavaCPP native build plugin-->
      <!--  old-style way to get it to compile. -->
      <!--based on https://github.com/bytedeco/javacpp/wiki/Maven-->
      <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>exec-maven-plugin</artifactId>
          <version>1.2.1</version>
          <executions>
              <execution>
                  <id>javacpp</id>
                  <phase>process-classes</phase>
                  <goals>
                      <goal>exec</goal>
                  </goals>
                  <configuration>
                      <executable>java</executable>
                      <arguments>
                          <argument>-jar</argument>
                          <argument>${org.bytedeco:javacpp:jar}</argument>
                          <argument>-classpath</argument>
                          <argument>${project.build.outputDirectory}</argument>
                          <argument>-Xcompiler</argument>
                          <!--use the include directory of the .hpp files after running -->
                          <!--sudo apt-get install libviennacl-dev-->
                          <!-- this must be changed if the headers are in a different directory -->
                        <argument>-I${project.basedir}/src/main/cpp</argument>
                          <!--<argument>-I/usr/include</argument>/viennacl/src/main/cpp-->
                        <!--TODO: set an e.g viennacl.install property that can be overridded from maven-->
                        <!--<argument>-I${viennacl.install}</argument>-->
                      </arguments>
                  </configuration>
              </execution>
          </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>2.3</version>
        <executions>
          <execution>
            <goals>
              <goal>properties</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.2.1</version>
      </plugin>

    </plugins>

  </build>

  <dependencies>

    <!--  3rd-party -->
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
    </dependency>

    <!-- scala stuff -->
    <dependency>
      <groupId>org.scalatest</groupId>
      <artifactId>scalatest_${scala.compat.version}</artifactId>
    </dependency>

    <!-- scala-library for annotations at compile time-->
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <version>${scala.version}</version>
    </dependency>


    <dependency>
      <groupId>org.bytedeco</groupId>
      <artifactId>javacpp</artifactId>
      <version>1.2.1</version>
    </dependency>

  </dependencies>


  <profiles>
    <profile>
      <id>mahout-release</id>
      <build>
        <plugins>
          <plugin>
            <groupId>net.alchim31.maven</groupId>
            <artifactId>scala-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>generate-scaladoc</id>
                <goals>
                  <goal>doc</goal>
                </goals>
              </execution>
              <execution>
                <id>attach-scaladoc-jar</id>
                <goals>
                  <goal>doc-jar</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>travis</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <!-- Limit memory for unit tests in Travis -->
              <argLine>-Xmx3g</argLine>
              <!--<argLine>-Djava.library.path=${project.build.directory}/libs/natives/linux-x86_64:${project.build.directory}/libs/natives/linux:${project.build.directory}/libs/natives/maxosx</argLine>-->
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <!-- Limit memory for integration tests in Travis -->
              <argLine>-Xmx3g</argLine>
              <!--<argLine>-Djava.library.path=${project.build.directory}/libs/natives/linux-x86_64:${project.build.directory}/libs/natives/linux:${project.build.directory}/libs/natives/maxosx</argLine>-->
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
